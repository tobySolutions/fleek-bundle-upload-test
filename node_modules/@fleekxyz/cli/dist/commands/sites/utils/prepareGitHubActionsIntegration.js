"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.prepareGitHubActionsIntegration = exports.ghActionsDeploySitesYamlPath = exports.ghActionsWorflowsDirectory = exports.ghWorkflowFilename = void 0;
const utils_1 = require("@fleekxyz/utils");
const path_1 = require("path");
const confirmFileOverridePrompt_1 = require("../prompts/confirmFileOverridePrompt");
const fileExists_1 = require("./fileExists");
const getDeploymentWorkflowYamlLocation_1 = require("./getDeploymentWorkflowYamlLocation");
const initializeDeploymentWorkflowDirectory_1 = require("./initializeDeploymentWorkflowDirectory");
const requestDeploymentWorkflowInstallCommand_1 = require("./requestDeploymentWorkflowInstallCommand");
const saveDeploymentWorkflowYaml_1 = require("./saveDeploymentWorkflowYaml");
exports.ghWorkflowFilename = 'fleek-deploy.yaml';
exports.ghActionsWorflowsDirectory = (0, path_1.join)(process.cwd(), '.github/workflows');
exports.ghActionsDeploySitesYamlPath = (0, path_1.join)(exports.ghActionsWorflowsDirectory, exports.ghWorkflowFilename);
const prepareGitHubActionsIntegration = async ({ personalAccessToken, projectId, fleekConfigPath, output, }) => {
    const installCommand = await (0, requestDeploymentWorkflowInstallCommand_1.requestDeploymentWorkflowInstallCommand)();
    const yamlContent = (0, utils_1.generateDeploymentWorkflowYaml)({
        fleekConfigPath,
        installCommand,
    });
    const yamlPath = await (0, getDeploymentWorkflowYamlLocation_1.getDeploymentWorkflowYamlLocation)();
    const pathExists = await (0, fileExists_1.fileExists)(yamlPath);
    if (pathExists && !(await (0, confirmFileOverridePrompt_1.confirmFileOverridePrompt)({ path: yamlPath }))) {
        return;
    }
    if (yamlPath === exports.ghActionsDeploySitesYamlPath) {
        await (0, initializeDeploymentWorkflowDirectory_1.initializeDeploymentWorkflowDirectory)({
            output,
            ghActionsWorflowsDirectory: exports.ghActionsWorflowsDirectory,
        });
    }
    await (0, saveDeploymentWorkflowYaml_1.saveDeploymentWorkflowYaml)({
        yamlPath,
        yamlContent,
        personalAccessToken,
        projectId,
        output,
    });
};
exports.prepareGitHubActionsIntegration = prepareGitHubActionsIntegration;
//# sourceMappingURL=prepareGitHubActionsIntegration.js.map